{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },

  // Serilog framework can look at this to configure itself
  "Serilog": {

    // This determines which of the types of logging you want to have
    "Using": [
      // This will allow logs to go into your console. Console in this case (for an Angular driven app, means the Terminal that appears when you launch your app)
      "Serilog.Sinks.Console",

      // This will allow logging to Datadog
      "Serilog.Sinks.Datadog.Logs"
    ],

    // These are the log levels you want to support
    "MinimumLevel": {

      // By default, you could say "I only want to see errors coming up"
      "Default": "Warning",

      // If you are wanting to see information or debug or trace etc logs from other specific c# class namespaces, then you can configure them here
      "Override": {

        // Anything in a namespace that starts with `Microsoft` we only care about Errors being flagged (for example)
        "Microsoft": "Warning",

        // Anything in a namespace that starts with `System` we only care about Errors being flagged (for example)
        "System": "Warning"
      }
    },

    // Given that we have defined which frameworks we want to make use of in the "Using" section, we can now use the framework functionality for Console, File, RollingFile, Datadog, etc.
    "WriteTo": [

      // Tells Serilog to log stuff to the console
      {
        "Name": "Console"
        //... You can configure more here but you'll need to Google that yourself
      },

      // Tells Serilog to log stuff to a DataDog instance
      {
        // This name is important! It must be precisely this to work!
        "Name": "DatadogLogs",

        // The configuration properties here must all be written precisely as the following are
        "Args": {

          // Mandatory | API Key - Found in Datadog Organization/Api Keys section.
          "apiKey": "-----",

          // Optional | An arbitrary "servive" that enables you to filter to your logs within the DataDog application
          "service": "api-poc-datadog",

          // Optional | An arbitrary "host" that enables you to filter to your logs within the DataDog application
          "host": "mazivila",

          // Optional | Arbitrary "tags" that enables you to filter to your logs within the DataDog application
          "tags": [ "app.name:poc-datadog" ],

          // Optional | The default Datadog server is "intake.logs.datadoghq.com". If your DataDog instance is on the "app.datadoghq.com" URL, you do not need any of this configuration.
          //
          //          | If you are not on the default Datadog server, you will need to find out what server you are on by visiting here and using the dropdown at the right https://docs.datadoghq.com/getting_started/site/
          //          | and then, once you know the server, you can visit here for the URL to use: https://docs.datadoghq.com/logs/log_collection/?tab=host#supported-endpoints
          // 
          //          | IMPORTANT: the URLs are not quite the entire URL that's needed. Be aware that "https://" will need to be placed on to determine which type you want to use. For example:
          "configuration": {
            "url": "https://http-intake.logs.us5.datadoghq.com",
            "port": 443
          }
        }
      }
    ],

    // This ends up being stored in the final log message that is raised for you. You'll see it in DataDog under "properties" object where it mentions "Thread Id" or "SourceContext" for example.
    "Enrich": [ "FromLogContext", "WithMachineName", "WithThreadId" ],

    // This ends up being stored in the final log message that is raised for you. You'll see it in DataDog under "properties" object where it mentions "Application".
    "Properties": {
      "Application": "POC Datadog"
    }
  },

  "AllowedHosts": "*"
}
